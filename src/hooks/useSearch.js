import { useState, useRef } from 'react';
import { Alert, Keyboard } from 'react-native';
import { searchPlaces, reverseGeocode } from '../services/api';

/**
 * –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–º –º–µ—Å—Ç –∏ –∏—Ö –≤—ã–±–æ—Ä–æ–º
 * @param {Object} dependencies - –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ö—É–∫–∞
 * @param {Object} dependencies.location - –¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Function} dependencies.calculateDistance - –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
 * @return {Object} –û–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–∏—Å–∫–∞
 */
export const useSearch = ({ location, calculateDistance }) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
  const [searchText, setSearchText] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [isSearchFocused, setIsSearchFocused] = useState(false);
  const [isSearchLoading, setIsSearchLoading] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
  const [selectedLocation, setSelectedLocation] = useState(null);
  const [selectedPlaceInfo, setSelectedPlaceInfo] = useState(null);
  
  // –°—Å—ã–ª–∫–∏
  const searchTimerRef = useRef(null);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
  const handleSearchTextChange = (text) => {
    setSearchText(text);
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç
    if (searchTimerRef.current) {
      clearTimeout(searchTimerRef.current);
    }
    
    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, —Å—Ä–∞–∑—É –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if (!text.trim()) {
      setSearchResults([]);
      return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ (–¥–µ–±–∞—É–Ω—Å–∏–Ω–≥)
    searchTimerRef.current = setTimeout(() => {
      if (text.trim().length >= 3) {
        handleSearch(text);
      }
    }, 300); // –ó–∞–¥–µ—Ä–∂–∫–∞ 300 –º—Å –º–µ–∂–¥—É –≤–≤–æ–¥–æ–º –∏ –∑–∞–ø—Ä–æ—Å–æ–º
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞
  const handleSearch = (searchQuery = searchText) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–±–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –ª–∏–±–æ —Ç–µ–∫—É—â–∏–π searchText
    const query = searchQuery.trim();
    
    if (!query) {
      setSearchResults([]);
      return;
    }
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞
    if (query.length < 3) {
      return;
    }
    
    console.log(`–í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: "${query}"`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    setIsSearchLoading(true);
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Å—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É, –ø–µ—Ä–µ–¥–∞–≤–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    const userCoords = location?.coords ? {
      latitude: location.coords.latitude,
      longitude: location.coords.longitude
    } : null;
    
    searchPlaces(query, 20, userCoords)
      .then(results => {
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        setIsSearchLoading(false);
        
        if (!results || !Array.isArray(results)) {
          console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞:', results);
          setSearchResults([]);
          return;
        }
        
        console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞`);
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        const sortedResults = sortSearchResults(results, userCoords);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–æ–Ω–∏ —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –≤ API)
        setSearchResults(sortedResults);
      })
      .catch(error => {
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        setIsSearchLoading(false);
        
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–µ—Å—Ç:', error);
        Alert.alert(
          "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞", 
          "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
        );
        setSearchResults([]);
      });
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ –ø–æ–∏—Å–∫–∞
  const handleSelectSearchResult = (result, mapRef, onRouteCancel) => {
    console.log('üîç –í–´–ó–í–ê–ù handleSelectSearchResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º:', JSON.stringify(result));
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    Keyboard.dismiss();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (!result) {
      console.warn('üö´ –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞');
      return;
    }
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      const lat = typeof result.latitude === 'string' ? parseFloat(result.latitude) : result.latitude;
      const lng = typeof result.longitude === 'string' ? parseFloat(result.longitude) : result.longitude;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      if (isNaN(lat) || isNaN(lng)) {
        console.error('üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ:', JSON.stringify(result));
        return;
      }
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
      const coordinate = {
        latitude: lat,
        longitude: lng
      };
      
      console.log('üìç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Ä–∫–µ—Ä–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º:', coordinate);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      setSearchText('');
      setSearchResults([]);
      setIsSearchFocused(false);
      
      // –°–±—Ä–æ—Å –º–∞—Ä—à—Ä—É—Ç–∞ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
      if (onRouteCancel) {
        onRouteCancel();
      }
      
      // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–∫–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–π
      if (mapRef?.current?.clearMarkers) {
        console.log('üóë –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º–µ—Ç–æ–∫ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–π');
        mapRef.current.clearMarkers();
      }
      
      // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ
      const placeInfo = {
        name: result.name || '–í—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ',
        address: result.address || `${lat.toFixed(6)}, ${lng.toFixed(6)}`,
        distance: result.distance
      };
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
      setSelectedLocation(coordinate);
      setSelectedPlaceInfo(placeInfo);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω
      const newRegion = {
        latitude: lat,
        longitude: lng,
        latitudeDelta: 0.01,
        longitudeDelta: 0.01
      };
      
      // –ê–Ω–∏–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
      setTimeout(() => {
        if (mapRef?.current) {
          console.log('üó∫Ô∏è –ê–Ω–∏–º–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º:', coordinate);
          mapRef.current.animateToRegion(newRegion, 300);
        } else {
          console.warn('‚ö†Ô∏è mapRef –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏');
        }
      }, 300);
      
      console.log('‚úÖ –í—ã–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('üî¥ –û—à–∏–±–∫–∞ –≤ handleSelectSearchResult:', error);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–∞—Ä—Ç—É
  const handleMapPress = async (event, isRouting, mapRef, onRouteCancel) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    if (!event || !event.nativeEvent) {
      console.warn('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–∞—Ä—Ç—É');
      return;
    }
    
    // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–∞—Ä—Ç—É
    if (isRouting) return;
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    Keyboard.dismiss();
    
    // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞, —Å–∫—Ä—ã–≤–∞–µ–º –µ—ë
    if (isSearchFocused) {
      setIsSearchFocused(false);
    }
    
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å–æ–±—ã—Ç–∏—è
      const { coordinate } = event.nativeEvent;
      
      if (!coordinate) {
        console.warn('–ù–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Å–æ–±—ã—Ç–∏–∏ –Ω–∞–∂–∞—Ç–∏—è');
        return;
      }
      
      const { latitude, longitude } = coordinate;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      if (typeof latitude !== 'number' || 
          typeof longitude !== 'number' || 
          isNaN(latitude) || 
          isNaN(longitude)) {
        console.warn('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Å–æ–±—ã—Ç–∏–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–∞—Ä—Ç—É');
        return;
      }
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
      const newLocation = {
        latitude: parseFloat(latitude.toFixed(6)),
        longitude: parseFloat(longitude.toFixed(6))
      };
      
      console.log('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ —Ç–∞–ø–∞ –ø–æ –∫–∞—Ä—Ç–µ:', newLocation);
      
      // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–∫–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–π
      if (mapRef?.current?.clearMarkers) {
        console.log('üóë –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º–µ—Ç–æ–∫ –ø—Ä–∏ —Ç–∞–ø–µ –ø–æ –∫–∞—Ä—Ç–µ');
        mapRef.current.clearMarkers();
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
      setSelectedLocation(newLocation);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
      setSearchResults([]);
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –º–∞—Ä—à—Ä—É—Ç–∞, –≤—ã–∑—ã–≤–∞–µ–º –µ—ë
      if (onRouteCancel) {
        onRouteCancel();
      }
      
      // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞—Ä—Ç—É –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ —Å –±–æ–ª—å—à–∏–º –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ–º
      mapRef?.current?.animateToRegion({
        latitude: newLocation.latitude,
        longitude: newLocation.longitude,
        latitudeDelta: 0.001, // –£–º–µ–Ω—å—à–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è
        longitudeDelta: 0.001
      }, 300);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
      const placeInfo = await reverseGeocode(latitude, longitude)
        .catch(error => {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞:', error);
          return {
            name: '–í—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ',
            address: `${latitude.toFixed(6)}, ${longitude.toFixed(6)}`
          };
        });
        
      // –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
      if (location && location.coords) {
        const distance = calculateDistance(
          location.coords.latitude, location.coords.longitude,
          latitude, longitude
        );
        
        setSelectedPlaceInfo({
          ...placeInfo,
          distance
        });
      } else {
        setSelectedPlaceInfo(placeInfo);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–∞—Ä—Ç—É:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
  const sortSearchResults = (results, userCoords) => {
    if (!results || !results.length) return [];
    
    // –ö–æ–ø–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π
    const resultsCopy = [...results];
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
    if (userCoords) {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ —Ñ–ª–∞–≥ –ª–æ–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      resultsCopy.forEach(result => {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        const distance = calculateDistance(
          userCoords.latitude, 
          userCoords.longitude,
          result.latitude,
          result.longitude
        );
        
        result.distance = distance;
        // –§–ª–∞–≥ –ª–æ–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (–≤ —Ä–∞–¥–∏—É—Å–µ 50 –∫–º)
        result.isLocal = distance <= 50;
      });
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ, –∑–∞—Ç–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
      resultsCopy.sort((a, b) => {
        // –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–≤—ã–º–∏
        if (a.isLocal && !b.isLocal) return -1;
        if (!a.isLocal && b.isLocal) return 1;
        
        // –ó–∞—Ç–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
        return a.distance - b.distance;
      });
    }
    
    return resultsCopy;
  };

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const cleanupSearch = () => {
    if (searchTimerRef.current) {
      clearTimeout(searchTimerRef.current);
    }
  };

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è
    searchText,
    searchResults,
    isSearchFocused,
    isSearchLoading,
    selectedLocation,
    selectedPlaceInfo,
    
    // –°–µ—Ç—Ç–µ—Ä—ã
    setSearchText,
    setIsSearchFocused,
    setSelectedLocation,
    setSelectedPlaceInfo,
    
    // –ú–µ—Ç–æ–¥—ã
    handleSearchTextChange,
    handleSearch,
    handleSelectSearchResult,
    handleMapPress,
    cleanupSearch
  };
};

export default useSearch; 